using PuppeteerSharp;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DurablePuppeteer
{
    public static class RequestConsumer
    {
        internal static readonly System.Text.RegularExpressions.Regex RegexDenyTracking = new System.Text.RegularExpressions.Regex("(api.mixpanel.com|liveperson.net|api.segment.io)", System.Text.RegularExpressions.RegexOptions.Compiled);
        internal static readonly System.Text.RegularExpressions.Regex RegexBlockMeta = new System.Text.RegularExpressions.Regex("/gurux/$");
        private static BlockingCollection<Request> _incoming = new BlockingCollection<Request>();
        private static bool _running = false;

        public static bool IsRunning { get { return _running; } }

        public static void Start()
        {
            Task.Run(() =>
            {
                Consume();
            });
            _running = true;
        }

        public static void Stop()
        {
            _running = false;
        }

        private static async void Consume()
        {
            while (_running)
            {
                try
                {
                    if (_incoming.TryTake(out Request e))
                    {
                        var meta = RegexBlockMeta.Match(e.Url);

                        if (meta.Success)
                        {
                            var guruxcontent = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(""));
                            await e.RespondAsync(new ResponseData()
                            {
                                Body = guruxcontent,
                                Status = System.Net.HttpStatusCode.OK,
                            });
                        }

                        var result = RegexDenyTracking.Match(e.Url);
                        if (!result.Success)
                        {
                            await e.ContinueAsync();
                        }
                        else
                        {
                            await e.AbortAsync();
                        }
                    }
                    else
                    {
                        await Task.Delay(10);
                    }
                }
                catch { }
            }
        }

        public static void AddRequest(Request request)
        {
            _incoming.Add(request);
        }
    }
}
